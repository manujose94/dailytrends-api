name: Build Image and Push to Registry

on:
  push:
    branches: 
      - "main"
    # Publish tags usng releases.
    tags:
      - 'v*.*.*'
  pull_request:
    types: 
      - closed
    branches: 
      - "main"
  workflow_dispatch:
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

permissions: write-all

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@6e04d228eb30da1757ee4e1dd75a0ec73a653e06 #v3.1.1
        with:
          cosign-release: 'v2.1.1'

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@f95db51fddba0c2d1ec667646a06c2ce06100226 # v3.0.0

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      # Extract version from the tag if it follows semantic versioning format
      - name: Get version from tag
        id: extract_version
        run: |
          if [[ "${{ github.ref }}" =~ refs/tags/v([0-9]+.[0-9]+.[0-9]+) ]]; then
            echo "VERSION=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "Extracted version: ${BASH_REMATCH[1]}"
          else
            echo "Not found version from TAG"
          fi
          
      # If the version from tag is empty, get the latest release version from GitHub
      - name: Get latest release version
        if: steps.extract_version.outputs.defaultversion == ''
        id: get_latest_release
        run: |
          latest_release=$(curl -s "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases/latest" | jq -r '.tag_name')
          if [[ "$latest_release" == "null" ]]; then
            echo "VERSION=1.0.0" >> $GITHUB_OUTPUT
            echo "Latest release version: 1.0.0"
          else
            echo "VERSION=${latest_release}" >> $GITHUB_OUTPUT
            echo "Latest release version: ${latest_release}"
          fi
          

      - name: Determine version
        id: determine_version
        run: |
          if [[ -n "${{ steps.extract_version.outputs.VERSION }}" ]]; then
            echo "VERSION=${{ steps.extract_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ steps.get_latest_release.outputs.VERSION }}" >> $GITHUB_OUTPUT
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}" >> $GITHUB_ENV
      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        if: steps.determine_version.outputs.VERSION != ''
        uses: docker/build-push-action@0565240e2d4ab88bba5387d719585280857ece09 # v5.0.0
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags:  ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.determine_version.outputs.VERSION }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Print success message
        if: ${{ success() && steps.determine_version.outputs.VERSION != '' }}  
        run: |
          author_name="${{ github.actor }}"
          image="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.determine_version.outputs.VERSION }}"
          echo "🎉 Successfully pushed images to ghcr.io" >> $GITHUB_STEP_SUMMARY
          echo "Triggered by 👤 $author_name" >> $GITHUB_STEP_SUMMARY
          echo " Image Pushed: ${{ env.IMAGE }} " >> $GITHUB_STEP_SUMMARY

      - name: Print warning message
        if: ${{ success() && steps.determine_version.outputs.VERSION == '' }}  
        run: |
          author_name="${{ github.actor }}"
          echo "⚠️ Warining: Unable to determine version. Image cannot be created. Please ensure the version is provided.io" >> $GITHUB_STEP_SUMMARY
          echo "  - Option1: Create a new Release X.X.X" >> $GITHUB_STEP_SUMMARY
          echo "  - Option2: Push to main to match a tag in the format vX.Y.Z," >> $GITHUB_STEP_SUMMARY